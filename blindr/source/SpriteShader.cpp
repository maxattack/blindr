#include "SpriteShader.h"

//--------------------------------------------------------------------------------
// Generated by tools/export_shaders.py
//--------------------------------------------------------------------------------

static const char sSpriteShaderVertSrc[] = 
	"attribute mediump vec2 tex;\n"
	"attribute mediump vec2 pos;\n"
	"uniform mediump vec2 atlasSizeInv;\n"
	"uniform mediump mat4 mvp;\n"
	"varying mediump vec2 uv;\n"
	"void main ()\n"
	"{\n"
	"  mediump vec4 tmpvar_1;\n"
	"  tmpvar_1.zw = vec2(0.0, 1.0);\n"
	"  tmpvar_1.xy = pos;\n"
	"  mediump vec4 tmpvar_2;\n"
	"  tmpvar_2 = (mvp * tmpvar_1);\n"
	"  gl_Position = tmpvar_2;\n"
	"  uv = (tex * atlasSizeInv);\n"
	"}\n";

static const char sSpriteShaderFragSrc[] = 
	"uniform lowp sampler2D atlasImage;\n"
	"uniform lowp vec4 colorMod;\n"
	"uniform lowp vec4 colorAdd;\n"
	"varying mediump vec2 uv;\n"
	"void main ()\n"
	"{\n"
	"  lowp vec4 tmpvar_1;\n"
	"  tmpvar_1 = (colorAdd + (colorMod * texture2D (atlasImage, uv)));\n"
	"  gl_FragColor = tmpvar_1;\n"
	"}\n";

void SpriteShader::initializeShader() {
	compile(sSpriteShaderVertSrc, sSpriteShaderFragSrc);
	mPos = glGetAttribLocation(progHandle(), "pos");
	mTex = glGetAttribLocation(progHandle(), "tex");
	mColorMod = glGetUniformLocation(progHandle(), "colorMod");
	mMvp = glGetUniformLocation(progHandle(), "mvp");
	mColorAdd = glGetUniformLocation(progHandle(), "colorAdd");
	mAtlasImage = glGetUniformLocation(progHandle(), "atlasImage");
	mAtlasSizeInv = glGetUniformLocation(progHandle(), "atlasSizeInv");
	mAttribBegin = &mPos;
	mAttribEnd = &mTex+1;
}

